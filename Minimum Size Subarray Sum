# Minimum Size Subarray Sum

**********************************************PROBLEM STATEMENT**************************************

Given an array of positive integers nums and a positive integer target,
return the minimal length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr] of which the sum is greater than or equal to target.
If there is no such subarray, return 0 instead.

# Concept Used : - Sliding Window

**************************************************CODE*******************************************

def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        
        if len(nums)==0:
            return 0
        if nums[0]>=target:
            return 1
        
        sums=0
        mn=float('inf')
        l=0
        for r in range(len(nums)):
            sums+=nums[r]
            
            while sums>=target:
                mn=min(mn,r-l+1)
                sums-=nums[l]
                l+=1
                
        return mn if mn!=float('inf') else 0
